{
	"name": "glsl-lsp",
	"displayName": "GLSL",
	"description": "OpenGL Shading Language support for Visual Studio Code.",
	"version": "0.0.1",
	"preview": true,
	"publisher": "kuba-p",
	"author": {
		"name": "kuba_p"
	},
	"license": "MIT",
	"homepage": "https://github.com/KubaP/glsl-lsp/tree/master/client",
	"repository": {
		"type": "git",
		"url": "https://github.com/KubaP/glsl-lsp"
	},
	"bugs": {
		"url": "https://github.com/KubaP/glsl-lsp/issues"
	},
	"markdown": "github",
	"engines": {
		"vscode": "^1.69.0"
	},
	"categories": [
		"Programming Languages"
	],
	"keywords": [
		"glsl",
		"opengl"
	],
	"activationEvents": [
		"onLanguage:glsl",
		"onCommand:glsl-lsp.showVersion"
	],
	"main": "./out/main.js",
	"contributes": {
		"languages": [
			{
				"id": "glsl",
				"aliases": [
					"GLSL",
					"glsl"
				],
				"extensions": [
					".glsl",
					".vs",
					".vert",
					".v.glsl",
					".tc",
					".tesc",
					".tc.glsl",
					".te",
					".tese",
					".te.glsl",
					".gs",
					".geom",
					".g.glsl",
					".fs",
					".frag",
					".f.glsl",
					".comp"
				],
				"configuration": "./glsl.language-configuration.json"
			},
			{
				"id": "glsl.ast",
				"extensions": [
					".ast.glsl"
				],
				"configuration": "./glsl.ast.language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "glsl",
				"scopeName": "source.glsl",
				"path": "./syntaxes/glsl.tmLanguage.json"
			}
		],
		"commands": [
			{
				"command": "glsl-lsp.evaluateConditionals",
				"category": "GLSL",
				"title": "Evaluate conditional compilation for this file"
			},
			{
				"command": "glsl-lsp.disableConditionals",
				"category": "GLSL",
				"title": "Disable conditional compilation for this file"
			},
			{
				"command": "glsl-lsp.showAst",
				"category": "GLSL (debug command)",
				"title": "Show AST"
			},
			{
				"command": "glsl-lsp.showVersion",
				"category": "GLSL (debug command)",
				"title": "Show version"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "glsl-lsp.evaluateConditionals",
					"when": "editorLangId == glsl"
				},
				{
					"command": "glsl-lsp.disableConditionals",
					"when": "editorLangId == glsl"
				},
				{
					"command": "glsl-lsp.showAst",
					"when": "editorLangId == glsl"
				}
			]
		},
		"configuration": {
			"type": "object",
			"title": "GLSL",
			"properties": {
				"glsl-lsp.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server. This is a debug setting for developing the extension itself."
				},
				"glsl-lsp.conditionalCompilation.state": {
					"scope": "resource",
					"type": "string",
					"enum": [
						"off",
						"evaluate"
					],
					"default": "evaluate",
					"enumItemLabels": [
						"Off",
						"Evaluate"
					],
					"enumDescriptions": [
						"Conditional compilation is disabled",
						"Conditional compilation is evaluated"
					],
					"description": "The default state for conditional compilation when opening a new file. This setting can be overridden on a per-file basis using either a relevant CodeLens or an appropriate command."
				},
				"glsl-lsp.conditionalCompilation.codeLens": {
					"scope": "resource",
					"type": "boolean",
					"default": true,
					"description": "Whether to show CodeLens above controlling conditional compilation directives, allowing you to include/exclude them from the compilation."
				},
				"glsl-lsp.syntaxHighlighting.highlightEntireFile": {
					"scope": "resource",
					"type": "boolean",
					"default": true,
					"description": "Whether to syntax highlight the entire file, as opposed to just the chosen code depending on the `glsl-lsp.conditionalCompilation.state` setting. Because of the fact that conditional compilation is implemented through the preprocessor, this setting will require a file to be parsed more than once to fully parse and color every bit of text. Under certain complex conditional branching, this setting set to `true` can cause performance issues.",
					"markdownDescription": "Whether to syntax highlight the entire file, as opposed to just the chosen code depending on the `#glsl-lsp.conditionalCompilation.state#` setting. Because of the fact that conditional compilation is implemented through the preprocessor, this setting will require a file to be parsed more than once to fully parse and color every bit of text. Under certain complex conditional branching, this setting set to `true` can cause performance issues."
				}
			}
		},
		"semanticTokenTypes": [
			{
				"id": "punctuation",
				"description": "A punctuation symbol."
			},
			{
				"id": "boolean",
				"superType": "keyword",
				"description": "A boolean."
			},
			{
				"id": "builtInType",
				"superType": "keyword",
				"description": "A primitive type."
			},
			{
				"id": "subroutine",
				"superType": "function",
				"description": "A subroutine."
			},
			{
				"id": "layoutQualifier",
				"superType": "variable",
				"description": "A valid layout qualifier identifier."
			},
			{
				"id": "ident",
				"superType": "variable",
				"description": "An identifier which has not gone through name resolution and never will. This token is only used for any identifiers within macro bodies."
			},
			{
				"id": "unresolvedReference",
				"description": "An unresolved identifier. This could be an unresolved variable identifier, an unresolved type name, or an illegal layout qualifier identifier."
			},
			{
				"id": "invalid",
				"superType": "unresolvedReference",
				"description": "An invalid character."
			},
			{
				"id": "lineContinuator",
				"superType": "escapeSequence",
				"description": "A line-continuator character (``)."
			},
			{
				"id": "escapeSequence",
				"superType": "string",
				"description": "An escape sequence character."
			},
			{
				"id": "objectMacro",
				"superType": "macro",
				"description": "An object-like macro identifier. This is used at the macro definition site, and at any call sites."
			},
			{
				"id": "functionMacro",
				"superType": "macro",
				"description": "A function-like macro identifier. This is used at the macro definition site, and at any call sites."
			},
			{
				"id": "directive",
				"superType": "keyword",
				"description": "A general bit of text in a directive."
			},
			{
				"id": "directiveConcat",
				"superType": "directive",
				"description": "The macro concatenation operator (`##`)."
			},
			{
				"id": "directiveHash",
				"superType": "directive",
				"description": "The hash `#` symbol in a directive."
			},
			{
				"id": "directiveName",
				"superType": "directive",
				"description": "The name of the directive, e.g. `version` or `ifdef`."
			},
			{
				"id": "directiveVersion",
				"superType": "number",
				"description": "The GLSL version in a `#version` directive."
			},
			{
				"id": "directiveProfile",
				"superType": "directive",
				"description": "The GLSL profile in a `#version` directive."
			},
			{
				"id": "directiveExtName",
				"superType": "variable",
				"description": "The extension name in a `#extension` directive."
			},
			{
				"id": "directiveExtBehaviour",
				"superType": "directive",
				"description": "The extension behaviour in a `#extension` directive."
			},
			{
				"id": "directiveLineNumber",
				"superType": "number",
				"description": "The line number in a `#line` directive."
			},
			{
				"id": "directiveError",
				"superType": "directive",
				"description": "The message in an `#error` directive."
			},
			{
				"id": "directivePragma",
				"superType": "directive",
				"description": "The compiler option in a `#pragma` directive."
			}
		],
		"semanticTokenModifiers": [
			{
				"id": "macroSignature",
				"description": "Tokens within the macro signature, e.g. the `BAR(A, B)` within `#define BAR(A, B) foo`."
			},
			{
				"id": "macroBody",
				"description": "Tokens within the macro body, e.g. the `foo + bar` within `#define FOO foo + bar`."
			},
			{
				"id": "undefine",
				"description": "Tokens within the `#undef` directive; not applied to the `#undef` part."
			},
			{
				"id": "conditional",
				"description": "Tokens within a conditional directive; not applied to the `#if`/`#elif`/etc. part."
			}
		]
	},
	"scripts": {
		"build": "tsc -b",
		"buildGrammar": "npx js-yaml syntaxes/glsl.tmLanguage.yaml > syntaxes/glsl.tmLanguage.json",
		"watch": "tsc -b -w"
	},
	"dependencies": {
		"vscode-languageclient": "^8.0.2"
	},
	"devDependencies": {
		"@types/mocha": "^9.1.0",
		"@types/node": "^16.11.7",
		"@types/vscode": "^1.69.0",
		"@typescript-eslint/eslint-plugin": "^5.30.0",
		"@typescript-eslint/parser": "^5.30.0",
		"@vscode/test-electron": "^2.1.2",
		"eslint": "^8.13.0",
		"js-yaml": "^4.1.0",
		"mocha": "^9.2.1",
		"typescript": "^4.7.2"
	}
}
