# EXPRESSION GRAMMAR

expr ::= eq

# Operators in order of precedence
eq ::= tern {("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "^=" | "|=" | "<<=" | ">>=") tern}
tern ::= b_or {"?" expr ":" expr}
b_or ::= b_xor {"||" b_xor}
b_xor ::= b_and {"^^" b_and}
b_and ::= or {"&&" or}
or ::= xor {"|" xor}
xor ::= and {"^" and}
and ::= cmp2 {"&" cmp2}
cmp2 ::= cmp1 {("==" | "!=") cmp1}
cmp1 ::= shift {("<" | ">" | "<=" | ">=") shift}
shift ::= sum {("<<" | ">>") sum}
sum ::= product {("+" | "-") product}
product ::= prefix {("*" | "/" | "%") prefix}
prefix ::= {("++" | "--" | "-" | "~" | "!"+)} postfix
postfix ::= atom {("++" | "--")}

# Fundamental units
atom ::= LIT | IDENT | "(" expr ")" | member | fn_call_empty | fn_call_arg
fn_call_arg ::= IDENT "(" expr ("," expr)+ ")"
fn_call_empty ::= IDENT "(" ")"
member ::= IDENT ("." IDENT)+
# TODO: Add initializer lists, array constructors, etc.

LIT ::= #'[0-9]'+
IDENT ::= #'[A-Z]'+
# https://mdkrajnak.github.io/ebnftest/